"use strict";var GameView=React.createClass({displayName:"GameView",getInitialState:function(){return{options:[],current:{},points:0,round:1,gameLength:null,rightAnswer:null,answer:null,gameOver:!1,isAnswerCorrect:null,error:null,roundLoaded:!1,roundStarted:!1}},componentDidMount:function(){this.setupNewRound()},error:function(a){switch(a){case 1:this.setState({error:1});break;default:this.setState({error:1})}},next:function(a){a?this.startNewRound(a):this.gameOver()},setupNewRound:function(a){log("gameModule: setupNewRound");var b=this,c=this.props.game,d=a||0;c.next().then(function(a){log("gameModule: setupNewRound: got data"),log(a),setTimeout(function(){b.next(a)},d)},function(){b.error(1)})},startNewRound:function(a){this.setState({options:a.options,current:a.current,round:a.index,gameLength:a.gameLength,answer:null,rightAnswer:null,roundLoaded:!1,roundStarted:!1})},startRound:function(){this.setState({isAnswerCorrect:null,roundStarted:!0})},gameOver:function(){this.setState({options:[],current:{},isAnswerCorrect:null,rightAnswer:null,answer:null,gameOver:!0,roundLoaded:!1,roundStarted:!1})},onReady:function(){this.setState({roundLoaded:!0})},onUserAnswer:function(a){this.setState({answer:a})},getAnswer:function(a,b){var c=this,d=c.props.game;d.answer(a,b).then(function(a){setTimeout(function(){c.answered(a)},Settings.userDelay)})},answered:function(a){this.setState({rightAnswer:a.rightAnswer,points:a.points,isAnswerCorrect:a.isAnswerCorrect}),this.setupNewRound()},restart:function(){React.renderComponent(GameView({game:this.props.game.reset()}),document.getElementById("app")),this.replaceState(this.getInitialState()),this.componentDidMount()},goToPlaylist:function(){React.renderComponent(AppView(null),document.getElementById("app"))},render:function(){var a,b=this,c="";if(1===this.state.error)a=React.DOM.div({"class":"m-error"},React.DOM.p(null,"Something is wrong with this playlist"),React.DOM.button({onClick:b.goToPlaylist},"Choose another playlist"));else if(this.state.gameOver)a=React.DOM.ul({className:"m-app-bottom"},React.DOM.li(null,React.DOM.button({onClick:b.restart},"Play again")),React.DOM.li(null,React.DOM.button({onClick:b.goToPlaylist},"Choose another playlist")));else{if(!this.state.roundStarted&&this.state.roundLoaded){var d="Start";this.state.isAnswerCorrect?d="Right!":this.state.isAnswerCorrect===!1&&(d="Wrong!"),c=React.DOM.button({onClick:b.startRound},d)}else this.state.roundLoaded&&this.state.roundStarted&&(c=React.DOM.div(null,RoundOptions({options:this.state.options,answer:this.state.answer,rightAnswer:this.state.rightAnswer,onUserAnswer:this.onUserAnswer}),React.DOM.button({onClick:b.goToPlaylist},"Back")));a=React.DOM.div({className:"m-app-bottom"},MusicPlayer({current:this.state.current,answer:this.state.answer,hasStarted:this.state.roundStarted,isLoaded:this.state.roundLoaded,onRoundOver:this.getAnswer,onReady:this.onReady}),c)}return React.DOM.div({className:"m-app"},React.DOM.div({className:"m-app-top"},GameState({points:this.state.points,round:this.state.round,gameLength:this.state.gameLength})),a)}});